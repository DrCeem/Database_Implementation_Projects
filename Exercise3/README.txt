
Περιγραφή υλοποίησης:

  - Η εργασία διεκπεραιώθηκε σε γλώσσα C.

  - Η εργασία στο σύνολο της έγινε με δια ζώσης συνεργασία των μελών και δεν αποδίδονται εύσημα σε συγκεκριμένο άτομο για συγκεκριμένο 
  τμήμα κώδικα.

  - Το βασικό πρόγραμμα κάνει compile με την εντολή make sort και εκτελείται με την ./build/sort_name

  -Υπάρχουν επιρόσθετα test cases (στον φάκελο examples). 
  Συγκεκριμένα ένα chunk_functions_test (κάνει compile με την εντολή make chunk_functions_test και εκτελείται με την ./build/chunk_functions_test),
  για έλεγχο σωστής λειτουργίας των δομών και συναρτήσεων που αφορούν το chunk.
  ένα should_swap_test (κάνει compile με την εντολή make should_swap_test και εκτελείται με την ./build/should_swap_test) για έλεγχο σωστής εκτέλεσης
  της συνάρτησης should_swap,
  ένα sort_Chunk_test (κάνει compile με την εντολή make sort_Chunk_test και εκτελείται με την ./build/sort_Chunk_test)  για έλεγχο σωστής εκτέλεσης
  της συνάρτησης sort_Chunk και
  ένα sort_FileInChunks_test (κάνει compile με την εντολή make sort_FileInChunks_test και εκτελείται με την ./build/sort_FileInChunks_test)  για έλεγχο σωστής εκτέλεσης
  της συνάρτησης sort_FileInChunks.

Περιγραφή Υλοποίησης και χρήση γλωσσικού μοντέλου ChatGPT:

should_swap: Ο σύνδεσμος για την συνομιλία με το ChatGPT από την οποία προέκυψε η συγκεκριμένη συνάρτηση (καθώς και το test για την συνάρτηση )
είναι: https://chat.openai.com/share/163f6c1f-0c04-4299-9c92-af0abca94552 
Στην παραπάνω συζήτηση εξηγήσαμε στο ChatGPT την μορφή των εγγραφών καθώς και τον τρόπο με τον οποίο πρέπει να συγκρίνονται και στην συνέχεια 
του ζητήσαμε να υλοποιήσει την συνάρτηση σε C. Μας επέστρεψε μία συνάρτηση η οποία χρησιμοποίωντας την strcmp ελεγχει αν χρείαζεται να 
αντιμεταθούν οι δύο εγγραφές ελεγχοντας πρώτα το όνομα και αν υπάρχει ισότητα στο όνομα, το επίθετο. Αυτή η συνάρτηση χρησιμοποιήθηκε αυτούσια
μιας και ήταν σωστά υλοποιημένη και απλή. 

sort_Chunk, sortFileInChunks, merge: Ο σύνδεσμος για την συνομιλία του ChatGPT από την οποία προέκυψαν οι συγκεκριμένες συναρτήσεις (καθώς 
και τα αντίστοιχα test για αυτές) είναι: https://chat.openai.com/share/d442090c-153b-4d87-bccf-429a1946aab2
Σε αυτήν την συνομιλία εξηγήσαμε στο ChatGPT την μορφή όλων των δομών και συναρτήσεων για προσπέλαση και επεξεργασία των chunks (chunk.c) 
Αφου επιβεβαιώσουμε ότι έχει μια γενικότερη κατανόηση της λειτουργίας των παραπάνω του ζητάμε να δημιουργήσει χρησιμοποιώντας τις δοθέντες δομές 
και συναρτήσεις μια συνάρτηση sort_Chunk η οποία να λειτουγεί με κάποιους διαφορετικούς αλγόριθμους ταξινόμησης για ταξινόμηση εγγρφών μέσα σε 
ένα chunk (με χρήση της should_swap). Τελικά ενσωματώσαμε την quicksort στην υλοποίση μας η οποία συνολικά απαιτούσε 3 συναρτήσεις: την quicksort,
την partition και την sort_Chunk. Η sort chunk αποθηκεύει όλες τις εγγραφές του chunk σε πίνακα καλεί την quicksort που εκτελεί απλά
τον αλγόριθμο quicksort στον πίνακα (με την βοηθητική συνάρτηση partition) και στο τέλος αντιγράφει τα στοιχεία του ταξινομημένου πίνακα
πίσω στο αρχείο (chunk).
Στην partition που παρείχε το ChatGPT χρειάστηκε να τροποιηθεί η γραμμή που αφορούσε την κλήση της should_swap
που έλεγχε αν 2 εγγραφές πρέπει να αντιμεταθούν η όχι. Στην συνάρτηση όπως μας την έγγραψε κατέληγαν οι εγγραφές να είναι σε αντίθετη
της Αλφαβητική σειρά, πράγμα που λύθηκε ευκολα βάζοντας not (!) στην συνθήκη. 

Για την sort_FileInChunks απαιτήθηκαν περισσότερες διορθώσεις στον κώδικα που μας παρείχε. Συγκεκριμένα το η μεταβλητη chunk είναι CHUNK*
για ευκολότερη υλοποίηση, επιπλέον το πρώτο chunk αρχικοποιείται με βάση τον αρχικοποιημένο iterator (πράγμα που το ChatGPT δεν έκανε) ενώ 
ταυτόχρονα το ChatGPT προσπάθησε να τροποιήσει τις εγγραφές στο αρχείο εκ νέου με έναν περιτό βρόχο τον οποίο αφαιρέσαμε. Δημιουργήσαμε αντίστοιχα
test με τα test τις sort_Chunk με διαφορά ότι η ταξινόμηση εφαρμοζόταν σε όλα τα chunks του αρχείου σε αυτήν την περίπτωση.

Για την merge λογω της αυξημένης πολυπλοκότητας υλοποίησης της δεν χρησιμοποιήσαμε αυτούσιο τον κώδικα του ChatGPT αλλα τον
χρησιμοποιήσαμε σαν βάση για την υλοποίηση. Αφου υλοποιήσαμε δυναμικούς πίνακες για επεξεργασία των (το πολύ) bWay chunks την φορά 
έπειτα για κάθε bWay-αδα από chunks ελέγχουμε την πρώτη εγγραφή από κάθε chunk και βρίσκουμε την μικρότερη την εισάγουμε στό νέο αρχείο
και αυξάνουμε τον record_iterator του συγκεκριμένου chunk ωστε να δείχνει στην επόμενη εγγραφή του chunk. Η διαδικασία αυτή επαναλαμβάνεται μέχρι όλα 
τα bWay chunks να μην έχουν εγγραφές.

Σχόλια και Παρατηρήσεις:
-Άλλαξαμε σε κάποια πεδία των εγγραφών το μέγεθος του εκάστοτε πίνακα για να μπορούν να αποθηκευτούν σωστά όλες οι πιθανές τους τιμές.
-Στην quicksort μια βελτίωση θα ήταν η ίδια η quicksort να εφαρμόζεται με την χρήση του GetIthRecord και UpdateIthRecord κατευθείαν στο αρχείο
(chunk) και όχι σε πίνακες οι οποίοι "αντιγράφονται" στο αρχείο.
-Τα test για τις συναρτήσεις και δομές που αφορούν τα chunks προέκυψαν επίσης από το ChatGPT στο οποίο δώσαμε τις συγκεκριμένες δομές
και του ζητήσαμε να μας δημιουργήσει ένα test. Ο σύνδεσμος για τη συγκεκριμένη συνομιλία είναι: 
https://chat.openai.com/share/c6088d9e-52b3-40fe-83eb-63d74b3e1282

