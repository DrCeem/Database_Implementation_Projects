
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Μέλη της ομάδας:

Ονοματεπώνυμο: Ορφέας Ηλιάδης-Σιβρής
Αριθμός Μητρώου: 1115202000057

Ονοματεπώνυμο: Κωνσταντίνος Γκούφας
Αριθμός Μητρώου: 1115202000039

Ονοματεπώνυμο: Χριστίνα Μήτσιου
Αριθμός Μητρώου: 1115202000129

Περιγραφή υλοποίησης:

  - Η εργασία διεκπεραιώθηκε σε γλώσσα C.

  - Η εργασία στο σύνολο της έγινε με δια ζώσης συνεργασία των μελών και δεν αποδίδονται εύσημα σε συγκεκριμένο άτομο για συγκεκριμένο 
  τμήμα κώδικα.

  - Το πρόγγραμα κάνει compile με την ενολή make ht και εκτελείται με την ./build/runner

  - Οι συναρήσεις που σχετίζονται άμεσα με το αρχείο επεκτατού κατακερματισμού βρίσκονται στο αρχείο hash_file.c
    Επιπλέον εκτός απο τις συναρτήσεις που ζητούνται έχει υλοποιηθεί και η συνάρτηση HT_Close.

  - Οι βοηθητικές συναρήσεις που χρησιμοποιήθηκαν βρίσκονται στο αρχείο ht_helper_functions.c το οποίο αποθηκεύεται στο φάκελο src
    ~ powerCustom: Δέχεται μια βάση και έναν εκθέτη και επισρέφει τη δύναμη ( υλοποιήθηκε επειδή υπήρξαν θέματα στο linking της 
    βιβλιοθήκης math.h).
    ~ hash: Δέχεται έναν ακέραιο και το ολικό βάθος του πίνακα κατακερματισμού και επιστρέφει την τιμή της συνάρτησης κατακερματισμού 
    για αυτόν τον ακέραιο.
    ~ resize_array: Δέχεται έναν πίνακα και διπλασιάζει το μέγεθος του, αναθέτοντας στην κάθε θέση i του καινούργιου πίνακα το στοιχείο
    που έχει η θέση i/2 όπου i/2 το αποτέλεσμα της ακέραιας διαίρεσης του i με το δυο.
    ~ printRecord: Εκτυπώνει μια εγγραφή.
    ~ findBuddies: Δέχεται τον file descriptor του BF αρχείου, το id του bucket του οποίου θέλουμε να βρούμε τα φιλαράκια και επιστρέφει
    το id του index block (block ευρετηρίου) στο όποιο βρίσκεται το πρώτο φιλαράκι, τη θέση στο συγκεκριμένο index block και το πλήθος 
    απο φιλαράκια. Στο πλήθος αυτό περιλαμβάνεται και το ίδιο το bucket του οποίου το id έλαβε ως όρισμα η συνάρτηση. Αυτό σημαίνει ότι
    στην περίπτωση που το bucket δεν έχει φιλαράκια θα επιστραφεί 1 στο count (ο εαυτός του).
    ~ Check: Συνάρτηση για Testing. Χρησιμοποιείται για να εκτυπώνει τη μορφή του πίνακα κατακερματισμού καθώς και σε ποια buckets 
    "δείχνουν" τα κελία του. Υπάρχουν σε σχόλια και άλλες εκτυπώσεις για επιπλέον ελέγχους ανάλογα με το σκοπό του Testing. 

  - Το πρώτο block του αρχείου (block 0) περιέχει μια δομή κεφαλίδας αρχείου κατακερματισμού (header) η οποία περιέχει κάποιες βασικές
  πληροφορίες για το αρχείο επεκτατού κατακερματισμού. Οι πληροφορίες αυτές είναι:
    ~ Μεταβλητή που περιγράφει το αν πρόκειται για αρχείο επεκτατού κατακερματισμού.
    ~ Μεταβλητή που αφορά το πεδίο της εγγραφής πάνω στο οποίο θα γίνει ο κατακερματισμός.
    ~ Το ολικό βάθος του πίνακα κατακερματισμού.
    ~ Το μέγιστο αριθμό εγγραφών σε κουβάδες.
    ~ Τη μέγιστη χωρητικότητα (σε κελιά πίνακα κατακερματισμού) ενός block ευρετηρίου (index block).

  - Το κάθε block ευρετηρίου (index block) περιέχει μια δομή κεφαλίδας block ευρετηρίου η οποία αποθηκεύται στην αρχή του block και 
  περιέχει τις εξης πληροφορίες:
    ~ Το id του επόμενου block ευρετηρίου (index block).
    ~ Τον αριθμό των κελιών του πίνακα κατακερματισμού που είναι αποθηκευμένα στο συγκεκριμένο block ευρετηρίου.
  
  - Το κάθε bucket (record block) περιέχει μια δομή κεφαλίδας block εγγραφών/bucket η οποία αποθηκεύται στην αρχή του block και 
  περιέχει τις εξης πληροφορίες:
    ~ Τον αριθμό απο εγγραφές που περιέχεται στο συγκεκριμένο bucket.
    ~ Το τοπικό βάθος του συγκεκριμένου bucket.

  - Ο πίνακας File_Manager είναι ένας global δυναμικός πίνακας απο δείκτες σε δομές File_Info. Κάθε δομή File_Info περιέχει τον
  file descriptor του αρχείου καθώς και έναν δείκτη στο όνομα του. Για κάθε ανοιχτό αρχείο δημιουργείται ενας pointer σε δομή File_Info
  με τις παραπάνω πληροφορίες με σκοπό να αποθηκευτεί σε μια θέση του File_Manager. Ο File_Manager χρησιμοποιείται για την αντιστοίχηση 
  κάθε αρχείου επεκτατού κατακερματισμού με το BF αρχείο στο οποίο "αποθηκεύεται" το HT αρχείο.

  - Η HT_Init είναι υπέυθυνη για τη δέσμευση μνήμης και την αρχικοποίηση του πίνακα File_Manager και αντίστοιχα η HT_Close για την 
  αποδέσμευση του.

  - Η HT_CreateIndex δημιουργεί ένα καινούργιο αρχείο επεκτατού κατακερματισμού αρχικοποιώντας το αρχείο κεφαλίδας του. Επίσης ανάλογα
  με το αρχικό ολικό βάθος δεσμέυει και αρχικοποιεί το/τα block ευρετηρίου. Τέλος αναθέτει σε κάθε block ευρετηρίου το ανίστοιχο πλήθος
  κελιών του πίνακα κατακερματισμού και για καθένα απο αυτά αρχικοποιεί ένα bucket (record block) και αποθηκεύει το id του στο κελί.

  - Η HT_OpenIndex βρίσκει μια κενή θέση στον πίνακα File_Manager (αν υπάρχει) και αντιστοιχεί τη θέση αυτή στις πληροφορίες
  (ονομα αρχείου και file descriptor) του αρχείου που ανοίγει.

  - Η HT_CloseFile σβήνει την καταχώρηση του αρχείου που κλείνει απο τον πίνακα File_Manager. Επιπλέον σε περίπτωση που υπάρχει κάποιο
  καρφιτσωμένο block στον buffer απο το αρχείο, φροντίζει να το κάνει Unpin.

  - Η HT_InsertEntry έχει 3 σκέλη που αντιστοιχούν στα 3 πίθανα σενάρια εισαγωγής σε αρχείο επεκτατού κατακερματισμού. Αρχικά βρίσκει 
  το block ευρετηρίου καθώς και τη θέση σε αυτό όπου βρίσεκται ο δείκτης (id) του bucket (record block) οπου έκανε hash το id της 
  προς εισαγωγή εγγραφής. Μόλις βρεθεί ο κουβάς εκτελείται ένα απο τα 3 σενάρια:
    1. Εαν η εγγραφή χωράει στον κουβα, την εισάγουμε και ολοκληρώνουμε.
    2. Εαν δεν χωράει και το τοπικό βάθος είναι μικρότερο απο το ολικό "διασπάμε" τον κουβά σε 2, δημιουργώντας ουσιαστικά έναν 
    καινούργιο. Στη συνέχεια βρίσκουμε τα φιλαράκια που δείχναν στον αρχικό κουβά και ενημερώνουμε τα μισά πρώτα έτσι ώστε να δείχνουν
    στον καινούργιο κουβά και αυξάνουμε το τοπικό βάθος στον παλιό και τον νέο κουβά κατα 1. Τέλος για κάθε εγγραφή του παλιού κουβά
    καθώς και για την καινούργια καλούμε αναδρομικά την HT_InsertEntry έτσι ώστε η κάθε μια να τοποθετηθεί στον κατάλληλο εκ των δύο 
    κουβάδων.
    3. Εαν δεν χωράει και το τοπικό βάθος είναι ίσο με το ολικό ανακατασκευάζουμε τον πίνακα κατακερματισμού με διπλάσιο μέγεθος με χρήση
    της resize_array. Στη συνέχεια καλούμε την HT_InsertEntry αναδρομικά με την προς εισαγωγή εγγραφή (στον καινούργιο πίνακα 
    κατακερματισμού).

  - Η HT_PrintAllEntries εκτυπώνει την εγγραφή/εγγραφές με το id που δώθηκε αν αυτό δεν είναι NULL,βρίσκοντας  το block ευρετηρίου 
  καθώς και τη θέση σε αυτό όπου βρίσκεται ο δείκτης (id) του bucket (record block) και αναζητώντας την εγγραφη στο συγκεκριμένο bucket,
  αλλιώς εκτυπώνει όλες τις εγγραφές του αρχείου προσπελαύνοντας τα block ευρετηρίου και τους κουβάδες στους οποίους δείχνουν τα κελιά 
  του πίνακα κατακερματισμού (στο κάθε block ευρετηρίου).

  - Η HashStatistics αρχικά ελέγχει αν το αρχείο είναι ήδη ανοιχτό και στην περίπτωση που δεν είναι το ανοίγει. Εν συνεχεία βρίσκει
  τον αριθμό των blocks στο αρχείο συνολικά (header, index και record blocks) καθώς και τον μέγιστο και ελάχιστο αριθμό εγγραφών σε
  κάποιον κουβά (record block) και τον μέσο όρο εγγραφών σε όλους τους κουβάδες, προσπελαύνοντας τα block ευρετηρίου και τους κουβάδες
  στους οποίους δείχνουν τα κελιά του πίνακα κατακερματισμού (στο κάθε block ευρετηρίου).


Σχόλια:

  - Κατά τη δημιουργία του κώδικα, για να επαληθεύσουμε οτι οι εγγραφές τοποθετούνται στα σωστά buckets χρησιμοποιήσαμε κάποιες εντολές
  printf τις οποίες αφήσαμε σε comments, σε περίπτωση που η υπάρξη τους διευκολύνει τη διόρθωση.

  - Ο μέγιστος αριθμός εγγραφών για τον οποίο έγινε δοκιμή είναι 100.000 και από τα αποτελέσματα της εκτέλεσης φαινόταν οτι όλα δουλεύουν.

  - Στην HT_PrintAllEntries όλα τα blocks τα οποία καρφιτσώνονται στην μνήμη φροντίζουμε να ξεκαρφιτσωθούν πριν την αναδρομική της κλήση 
  έτσι ώστε να μην υπάρχει περίπτωση να προκληθεί υπερχείλιση στον buffer πριν την ολοκλήρωσή της.

Δυσλειτουργίες:

  -Το πρόγραμμα παρουσιάζει κάποια θέματα αν εκτελεστεί πολλαπλες φορές χωρίς να καθαριστεί το περιεχόμενο του αρχείου data.db.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



 